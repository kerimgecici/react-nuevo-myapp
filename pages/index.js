import Head from 'next/head'
import styles from '../styles/Home.module.scss'
import { wrapper } from '../app/store'
import { setEmployeeList, getEmployeeListAsync, selectEmployeeList, setFilteredEmployeeList, selectFilteredEmployeeList, selectFilterStatus } from '../app/slices/emloyeesSlice'

import { useDispatch, useSelector } from 'react-redux'
import { useState } from 'react'
import TopBar from "../app/modules/TopBar";
import SideBar from "../app/modules/SideBar";
import EmployeeList from "../app/modules/EmployeeList";
import { Container } from 'react-bootstrap'

function Home({ employeeList }) {
  const [employeeName, setEmployeeName] = useState('');
  const [companySelect, setCompanySelect] = useState('');
  const [area, setArea] = useState('');
  const [jobTitle, setJobTitle] = useState('');

  const dispatch = useDispatch();
  const filteredEmployeeList = useSelector(selectFilteredEmployeeList());
  const employeeListAll = useSelector(selectEmployeeList());
  const filterStatus = useSelector(selectFilterStatus())

  const handleSearchList = () => {

    const nameSearched = employeeList.filter((item) => {
      return Object.keys(item).some((key) => item[key].toString().toLowerCase().includes(employeeName.toLowerCase()))
    })
    const filteredListCompany = employeeList.filter((item) => {
      return Object.keys(item).some((key) => item['company'].includes(companySelect))
    })
    const companyAndSearch = filteredListCompany.filter((item) => {
      return Object.keys(item).some((key) => item[key].toString().toLowerCase().includes(employeeName.toLowerCase()))
    })
    if (employeeName.length < 1 && companySelect.length < 1) {
      return
    }
    if (employeeName.length > 0 && companySelect.length < 1) {
      dispatch(setFilteredEmployeeList(nameSearched))
    }
    if (employeeName.length < 1 && companySelect.length > 0) {
      dispatch(setFilteredEmployeeList(filteredListCompany))
    }
    if (employeeName.length > 0 && companySelect.length > 0) {
      dispatch(setFilteredEmployeeList(companyAndSearch))
    }
  };


  const handleFilteredList = () => {

    const jobTitleSearched = filteredEmployeeList.filter((item) => {
      return Object.keys(item).some((key) => item[key].toString().toLowerCase().includes(jobTitle.toLowerCase()))
    })
    const filteredListArea = filteredEmployeeList.filter((item) => {
      return Object.keys(item).some((key) => item['job'].includes(area))
    })
    const jobAndAreaSearch = filteredListArea.filter((item) => {
      return Object.keys(item).some((key) => item[key].toString().toLowerCase().includes(jobTitle.toLowerCase()))
    })

    if (jobTitle.length < 1 && area.length < 1) {

      dispatch(setFilteredEmployeeList(employeeListAll))
    }
    if (jobTitle.length > 0 && area.length < 1) {

      dispatch(setFilteredEmployeeList(jobTitleSearched))
    }
    if (jobTitle.length < 1 && area.length > 0) {

      dispatch(setFilteredEmployeeList(filteredListArea))
    }
    if (jobTitle.length > 0 && area.length > 0) {

      dispatch(setFilteredEmployeeList(jobAndAreaSearch))
    }

  }

  const companyFiltered = employeeList.map((item) => {
    return item.company
  })

  const uniqueCompanyList = companyFiltered.filter((c, index) => {
    return companyFiltered.indexOf(c) === index;
  });

  const areaFiltered = employeeList.map((item) => {
    return item.area
  })
  const uniqueAreaList = areaFiltered.filter((c, index) => {
    return areaFiltered.indexOf(c) === index;
  });


  return (

    <Container fluid="lg" className={styles.HomePage}>
      <Head>
        <title>Nuevo App </title>
        <meta name="description" content="Generated by Kerim GeÃ§ici" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {filterStatus && <SideBar className={styles.SideBar} uniqueAreaList={uniqueAreaList} area={area} changeArea={(name) => setArea(name)} filteredButton={() => handleFilteredList()} setJobTitle={(name) => setJobTitle(name)} />}
      <TopBar className={styles.TopBar} list={uniqueCompanyList} search={() => handleSearchList()} setEmployeeName={(name) => setEmployeeName(name)} setCompanySelect={(select) => setCompanySelect(select)} />
      {filterStatus && <EmployeeList className={styles.EmployeeList} />}
    </Container>

  )
}


export const getServerSideProps = wrapper.getServerSideProps((store) => async () => {
  let data = await store.dispatch(getEmployeeListAsync());
  store.dispatch(setEmployeeList(data.payload.data));

  return {
    props: {
      employeeList: data.payload.data
    }
  };
});

export default wrapper.withRedux(Home)
